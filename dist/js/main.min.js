"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var s,a={},t=Object.prototype,l=t.hasOwnProperty,u=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(s){i=function(t,e,r){return t[e]=r}}function c(t,e,r,n){var o,i,a,c,e=e&&e.prototype instanceof m?e:m,e=Object.create(e.prototype),n=new k(n||[]);return u(e,"_invoke",{value:(o=t,i=r,a=n,c=h,function(t,e){if(c===y)throw new Error("Generator is already running");if(c===p){if("throw"===t)throw e;return{value:s,done:!0}}for(a.method=t,a.arg=e;;){var r=a.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===s)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=s,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;n=f(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,v;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=s),r.delegate=null,v):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}(r,a);if(r){if(r===v)continue;return r}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===h)throw c=p,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=y;r=f(o,i,a);if("normal"===r.type){if(c=a.done?p:d,r.arg===v)continue;return{value:r.arg,done:a.done}}"throw"===r.type&&(c=p,a.method="throw",a.arg=r.arg)}})}),e}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}a.wrap=c;var h="suspendedStart",d="suspendedYield",y="executing",p="completed",v={};function m(){}function g(){}function L(){}var e={},w=(i(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(q([]))),b=(w&&w!==t&&l.call(w,n)&&(e=w),L.prototype=m.prototype=Object.create(e));function E(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function _(a,c){var e;u(this,"_invoke",{value:function(r,n){function t(){return new c(function(t,e){!function e(t,r,n,o){var i,t=f(a[t],a,r);if("throw"!==t.type)return(r=(i=t.arg).value)&&"object"==_typeof(r)&&l.call(r,"__await")?c.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):c.resolve(r).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function q(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=s,t.done=!0,t}).next=t}throw new TypeError(_typeof(e)+" is not iterable")}return u(b,"constructor",{value:g.prototype=L,configurable:!0}),u(L,"constructor",{value:g,configurable:!0}),g.displayName=i(L,o,"GeneratorFunction"),a.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},a.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,L):(t.__proto__=L,i(t,o,"GeneratorFunction")),t.prototype=Object.create(b),t},a.awrap=function(t){return{__await:t}},E(_.prototype),i(_.prototype,r,function(){return this}),a.AsyncIterator=_,a.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var i=new _(c(t,e,r,n),o);return a.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},E(b),i(b,o,"Generator"),i(b,n,function(){return this}),i(b,"toString",function(){return"[object Generator]"}),a.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},a.values=q,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=s,this.done=!1,this.delegate=null,this.method="next",this.arg=s,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=s)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return i.type="throw",i.arg=r,n.next=t,e&&(n.method="next",n.arg=s),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var a=l.call(o,"catchLoc"),c=l.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),S(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,S(o)),n}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:q(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=s),v}},a}function asyncGeneratorStep(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function _asyncToGenerator(c){return function(){var t=this,a=arguments;return new Promise(function(e,r){var n=c.apply(t,a);function o(t){asyncGeneratorStep(n,e,r,o,i,"next",t)}function i(t){asyncGeneratorStep(n,e,r,o,i,"throw",t)}o(void 0)})}}document.addEventListener("DOMContentLoaded",function(){var n=document.getElementById("menu-btn"),o=document.getElementById("menu-mobile");n.addEventListener("click",function(t){t.target.classList.toggle("active"),o.classList.toggle("active"),document.body.classList.toggle("active")});var i=1,e=new IntersectionObserver(function(t){t.forEach(function(t){t.isIntersecting&&i<2&&(document.querySelectorAll(".number").forEach(function(t){t.classList.add("viz")}),document.querySelectorAll("[data-num]").forEach(function(t){var e=1,r=parseInt(t.getAttribute("data-num"),10),n=setInterval(function(){e<=r?t.textContent=e:(i+=2,clearInterval(n)),e++},2e3/r)}),e.unobserve(t.target))})},{threshold:.5}),t=document.getElementById("statistic"),r=(t&&e.observe(t),document.querySelector(".statistic-gallery")),a=Array.from(r.querySelectorAll(".statistic-comedian"));function c(){var t=function(){for(var t=[].concat(a),e=[];e.length<6;){var r=Math.floor(Math.random()*t.length),r=t.splice(r,1)[0];e.push(r)}return e}();t=t,r.innerHTML="",t.forEach(function(t,e){t.style.opacity=0,t.style.position="relative",r.appendChild(t)}),t.forEach(function(t,e){setTimeout(function(){t.style.opacity=1,t.style.position="relative"},500*e)})}c(),setInterval(c,5e3);var t=document.getElementById("schedule__triggers"),s=document.querySelectorAll(".schedule__event");s.forEach(function(t){t.classList.remove("active"),t.classList.contains("top")&&t.classList.add("active")}),t.addEventListener("click",function(t){var e=t.target;e&&e.classList.contains("schedule__trigger")&&(document.querySelectorAll(".schedule__trigger").forEach(function(t){t.classList.remove("active")}),e.classList.add("active"),s.forEach(function(t){t.classList.remove("active"),t.classList.contains(e.dataset.tab)&&t.classList.add("active")}))});var l,u=document.querySelectorAll(".about__img"),f=0;function h(){d.apply(this,arguments)}function d(){return(d=_asyncToGenerator(_regeneratorRuntime().mark(function t(e,r){var n,o,i,a;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ymaps3.ready;case 2:o=ymaps3,i=o.YMap,a=o.YMapDefaultSchemeLayer,n=o.YMapDefaultFeaturesLayer,o=o.YMapMarker,(l=new i(document.getElementById("map"),{location:{center:e,zoom:r}})).addChild(new a),l.addChild(new n),(i=document.createElement("img")).classList.add("marker"),i.src="images/map-icon.svg",i.style.height="54px",i.style.width="54px",i.style.position="relative",i.style.top="0px",i.style.left="0px",a=new o({coordinates:e},i),l.addChild(a);case 16:case"end":return t.stop()}},t)}))).apply(this,arguments)}function y(t){document.querySelectorAll(".locations__descr").forEach(function(t){t.style.display="none"});t=document.querySelector('.locations__descr[data-descr="'.concat(t,'"]'));t&&(t.style.display="block")}u[f].classList.add("active"),setInterval(function(){u[f].classList.remove("active"),f=(f+1)%u.length,u[f].classList.add("active")},5e3);var t=document.querySelector(".locations__trigger.active"),p=JSON.parse(t.dataset.cord),v=t.dataset.zoom,t=t.dataset.tag;h(p,v),y(t);document.querySelector(".locations__triggers").addEventListener("click",function(t){var e,r,t=t.target;t&&t.classList.contains("locations__trigger")&&(document.querySelectorAll(".locations__trigger").forEach(function(t){return t.classList.remove("active")}),t.classList.add("active"),e=JSON.parse(t.dataset.cord),r=t.dataset.zoom,t=t.dataset.tag,l.destroy(),h(e,r),y(t))});p=document.querySelector(".faq__content");document.querySelectorAll(".faq__accordeon-button");p.addEventListener("click",function(t){(t=t.target)&&t.classList.contains("faq__accordeon-button")&&(t.nextElementSibling.style.maxHeight?(t.nextElementSibling.style.maxHeight=null,t.classList.remove("active")):(t.classList.add("active"),t.nextElementSibling.style.maxHeight=t.nextElementSibling.scrollHeight+"px"))});var m=document.querySelectorAll(".anchors-link");document.getElementById("menu-mobile").addEventListener("click",function(t){var r=t.target;m.forEach(function(t,e){r&&r===t&&(n.classList.remove("active"),o.classList.remove("active"),document.body.classList.remove("active"))})}),m.forEach(function(e){e.addEventListener("click",function(t){t.preventDefault();var t=e.getAttribute("data-href").substring(1);"header"===t?window.scrollTo({top:0,behavior:"smooth"}):(t=document.getElementById("".concat(t)))&&t.scrollIntoView({behavior:"smooth"})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
